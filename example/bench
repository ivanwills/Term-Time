#!/usr/bin/perl

# Created on: 2016-07-17 18:48:17
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Carp qw/carp croak cluck confess longmess/;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Path::Tiny;
use Term::Time;
use YAML::Syck qw/LoadFile Dump/;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    max     => 100,
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);

if ( !@ARGV ) {
    pod2usage( -verbose => 1 );
}

main();
exit 0;

sub main {
    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'config|c=s',
        'max|m=i',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    my $bench_code = LoadFile($option{config});
    my %full_stats = {};

    for my $code (keys %{ $bench_code }) {
        my $max = $bench_code->{max} || $option{max};
        my @stats;
        my $count = 1;

        while ( $count++ <= $max ) {
            if ($bench_code->{$code}{init}) {
                system $bench_code->{$code}{init};
            }
            push @stats, ttime($bench_code->{$code}{command});
            if ($bench_code->{$code}{destroy}) {
                system $bench_code->{$code}{destroy};
            }
        }

        my $stats = { count => $max };
        for my $stat (@stats) {
            $stats = add_keys($stats, $stat);
        }
        $full_stats{$code} = $stats;
    }
    warn Dump \%full_stats;

    return;
}

sub add_keys {
    my ($hash1, $hash2) = @_;
    my %sum = %{ $hash1 || {} };

    for my $key (keys %$hash2) {
        if ( ref $hash2->{$key} eq 'HASH' ) {
            $sum{$key} = { add_keys( $hash1->{$key}, $hash2->{$key} ) };
        }
        else {
            $sum{$key} //= 0;
            $hash2->{$key} =~ s/[%]$//;
            $sum{$key} += $hash2->{$key};
        }
    }

    return %sum;
}

__DATA__

=head1 NAME

bench - Command to benchmark other commands

=head1 VERSION

This documentation refers to bench version 0.0.1

=head1 SYNOPSIS

   bench [option]

 OPTIONS:
  -c --config[=]file
                The config file with the commands to run
  -m --max[=]int
                The maximum number of itterations to run

  -v --verbose  Show more detailed option
     --version  Prints the version information
     --help     Prints this help information
     --man      Prints the full documentation for bench

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2016 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
